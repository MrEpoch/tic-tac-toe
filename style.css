/* Made by Mr.Epoch as my practice of factory functions and modules in Odin project */

/*   * and html, body turns of some initial browser settings  */

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* I define some color variables here */

:root {
  --color-player-1: #bef264;
  --color-player-2: #ef4444d2;
  --color-tie: #a1a1aa;
  --color-body-background: #94a3b861;
  --color-board-background: #f1f5f9;
  --color-bars: rgba(0, 0, 0, 0.553);
  --color-bars-namespace: #171717;
}

html,
body {
  height: 100%;
  width: 100%;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

/* I made whole body be flex and made it centered, background color is in root */

body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--color-body-background);
}

/* Little design for input elements, color in root */

input {
  width: 160px;
  height: 25px;
  border-radius: 8px;
  border: 2px solid var(--color-bars);
  padding: 6px;
}

/* Player 1 div containing label and input, it is position absolute on left */

.player1 {
  position: absolute;
  left: 3%;
  top: 30%;
}

/* Player 2 div containing label and input, it is position absolute on right */

.player2 {
  position: absolute;
  right: 7%;
  top: 30%;
}

/* board class is my board on which will be each block, it is grid 3x3, background color is in root */

.board {
  height: 70%;
  width: 40%;
  border: 2px solid var(--color-bars);
  display: grid;
  grid-template: repeat(3, 1fr) / repeat(3, 1fr);
  background-color: var(--color-board-background);
}

/* Each board block has thin 1px border, it is centered flex for incoming gaming objects, border color in root */

.board > div {
  border: 1px solid var(--color-bars);
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* When board is hovered, it will turn pure white color */

.board > div:hover {
  background-color: #fff;
}

/* player1-namespace is player 1 name showing on screen, colors in root, position absolute on left */

.player1-namespace {
  border-radius: 3px;
  background-color: var(--color-player-1);
  font-size: 30px;
  position: absolute;
  top: 20%;
  left: 100px;
  border: 2px solid var(--color-bars-namespace);
}

/* player2-namespace is player 2 name showing on screen, colors in root, position absolute on right */

.player2-namespace {
  background-color: var(--color-player-2);
  font-size: 30px;
  position: absolute;
  top: 20%;
  right: 100px;
  border-radius: 3px;
  border: 2px solid var(--color-bars-namespace);
}

/* This will be displayed on body element when player 1 won, color in root */

.win {
  height: 70%;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 25px;
  border: 2px solid var(--color-bars);
  background-color: var(--color-player-1);
}

/* This will be displayed on body element when player 2 won, color in root */

.win2 {
  height: 70%;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 25px;
  border: 2px solid var(--color-bars);
  background-color: var(--color-player-2);
}

/* The text will have font-size 40px */

.win > p {
  font-size: 40px;
}

.win2 > p {
  font-size: 40px;
}

/* Element showing winning object will be 90px */

.win > p:nth-child(2) {
  font-size: 90px;
}

.win2 > p:nth-child(2) {
  font-size: 90px;
}

/* Cross will have green color, defined in root, it will take almost whole size of grid-block */

.cross {
  color: var(--color-player-1);
  width: 80%;
  height: 80%;
}

/* Circle will have red color, defined in root, it will take almost whole size of grid-block */

.circle {
  color: var(--color-player-2);
  width: 80%;
  height: 80%;
}

/* In case of tie this will be displayed, the color defined in root, except background color and length of text it is same as winning */

.tie {
  height: 70%;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 25px;
  border: 2px solid var(--color-bars);
  background-color: var(--color-tie);
}

.tie > p {
  font-size: 40px;
}

/* Buttons container will have position absolute at the bottom, it is flex with justify-content space-between */

.btns {
  position: absolute;
  bottom: 6%;
  display: flex;
  justify-content: space-between;
  width: 25%;
}

/* All buttons will have border-radius: 10px, border color in root */

button {
  width: 130px;
  height: 40px;
  border-radius: 10px;
  font-size: 16px;
  border: 2px solid var(--color-bars);
}
